// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: setting.sql

package db

import (
	"context"
	"time"
)

const createSetting = `-- name: CreateSetting :exec
insert into setting (account_id, relation_id, nick_name, is_leader)
values ($1, $2, $3, $4)
`

type CreateSettingParams struct {
	AccountID  int64  `json:"account_id"`
	RelationID int64  `json:"relation_id"`
	NickName   string `json:"nick_name"`
	IsLeader   bool   `json:"is_leader"`
}

func (q *Queries) CreateSetting(ctx context.Context, arg *CreateSettingParams) error {
	_, err := q.db.Exec(ctx, createSetting,
		arg.AccountID,
		arg.RelationID,
		arg.NickName,
		arg.IsLeader,
	)
	return err
}

const deleteSetting = `-- name: DeleteSetting :exec
delete
from setting
where account_id = $1
  and relation_id = $2
`

type DeleteSettingParams struct {
	AccountID  int64 `json:"account_id"`
	RelationID int64 `json:"relation_id"`
}

func (q *Queries) DeleteSetting(ctx context.Context, arg *DeleteSettingParams) error {
	_, err := q.db.Exec(ctx, deleteSetting, arg.AccountID, arg.RelationID)
	return err
}

const existsFriendSetting = `-- name: ExistsFriendSetting :one
select exists(
               select 1
               from setting s,
                    relation r
               where r.relation_type = 'friend'
                 and ((r.friend_type).account1_id = $1::bigint and
                      (r.friend_type).account2_id = $2::bigint)
                 and s.account_id = $1
           )
`

type ExistsFriendSettingParams struct {
	Account1ID int64 `json:"account1_id"`
	Account2ID int64 `json:"account2_id"`
}

func (q *Queries) ExistsFriendSetting(ctx context.Context, arg *ExistsFriendSettingParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsFriendSetting, arg.Account1ID, arg.Account2ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getFriendPinSettingsOrderByPinTime = `-- name: GetFriendPinSettingsOrderByPinTime :many
select relation_id,
       account1_id,
       account1_avatar,
       account2_id,
       account2_avatar,
       nick_name,
       pin_time
from setting_friend_info s
where account_id = $1
  and is_pin = true
order by pin_time
`

type GetFriendPinSettingsOrderByPinTimeRow struct {
	RelationID     int64     `json:"relation_id"`
	Account1ID     int64     `json:"account1_id"`
	Account1Avatar string    `json:"account1_avatar"`
	Account2ID     int64     `json:"account2_id"`
	Account2Avatar string    `json:"account2_avatar"`
	NickName       string    `json:"nick_name"`
	PinTime        time.Time `json:"pin_time"`
}

func (q *Queries) GetFriendPinSettingsOrderByPinTime(ctx context.Context, accountID int64) ([]*GetFriendPinSettingsOrderByPinTimeRow, error) {
	rows, err := q.db.Query(ctx, getFriendPinSettingsOrderByPinTime, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetFriendPinSettingsOrderByPinTimeRow{}
	for rows.Next() {
		var i GetFriendPinSettingsOrderByPinTimeRow
		if err := rows.Scan(
			&i.RelationID,
			&i.Account1ID,
			&i.Account1Avatar,
			&i.Account2ID,
			&i.Account2Avatar,
			&i.NickName,
			&i.PinTime,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendSettingsOrderByName = `-- name: GetFriendSettingsOrderByName :many
select s.account_id, s.relation_id, s.nick_name, s.is_not_disturb, s.is_pin, s.pin_time, s.is_show, s.last_show, s.account1_id, s.account1_avatar, s.account2_id, s.account2_avatar
from setting_friend_info s
where account_id = $1
order by nick_name
`

func (q *Queries) GetFriendSettingsOrderByName(ctx context.Context, accountID int64) ([]*SettingFriendInfo, error) {
	rows, err := q.db.Query(ctx, getFriendSettingsOrderByName, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SettingFriendInfo{}
	for rows.Next() {
		var i SettingFriendInfo
		if err := rows.Scan(
			&i.AccountID,
			&i.RelationID,
			&i.NickName,
			&i.IsNotDisturb,
			&i.IsPin,
			&i.PinTime,
			&i.IsShow,
			&i.LastShow,
			&i.Account1ID,
			&i.Account1Avatar,
			&i.Account2ID,
			&i.Account2Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendShowSettingsOrderByShowTime = `-- name: GetFriendShowSettingsOrderByShowTime :many
select s.account_id, s.relation_id, s.nick_name, s.is_not_disturb, s.is_pin, s.pin_time, s.is_show, s.last_show, s.account1_id, s.account1_avatar, s.account2_id, s.account2_avatar
from setting_friend_info s
where account_id = $1
  and is_show = true
order by last_show desc
`

func (q *Queries) GetFriendShowSettingsOrderByShowTime(ctx context.Context, accountID int64) ([]*SettingFriendInfo, error) {
	rows, err := q.db.Query(ctx, getFriendShowSettingsOrderByShowTime, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SettingFriendInfo{}
	for rows.Next() {
		var i SettingFriendInfo
		if err := rows.Scan(
			&i.AccountID,
			&i.RelationID,
			&i.NickName,
			&i.IsNotDisturb,
			&i.IsPin,
			&i.PinTime,
			&i.IsShow,
			&i.LastShow,
			&i.Account1ID,
			&i.Account1Avatar,
			&i.Account2ID,
			&i.Account2Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSettingByID = `-- name: GetSettingByID :one
select account_id, relation_id, nick_name, is_not_disturb, is_pin, pin_time, is_show, last_show, is_leader
from setting
where account_id = $1
  and relation_id = $2
`

type GetSettingByIDParams struct {
	AccountID  int64 `json:"account_id"`
	RelationID int64 `json:"relation_id"`
}

func (q *Queries) GetSettingByID(ctx context.Context, arg *GetSettingByIDParams) (*Setting, error) {
	row := q.db.QueryRow(ctx, getSettingByID, arg.AccountID, arg.RelationID)
	var i Setting
	err := row.Scan(
		&i.AccountID,
		&i.RelationID,
		&i.NickName,
		&i.IsNotDisturb,
		&i.IsPin,
		&i.PinTime,
		&i.IsShow,
		&i.LastShow,
		&i.IsLeader,
	)
	return &i, err
}

const updateSettingDisturb = `-- name: UpdateSettingDisturb :exec
update setting
set is_not_disturb = $3
where account_id = $1
  and relation_id = $2
`

type UpdateSettingDisturbParams struct {
	AccountID    int64 `json:"account_id"`
	RelationID   int64 `json:"relation_id"`
	IsNotDisturb bool  `json:"is_not_disturb"`
}

func (q *Queries) UpdateSettingDisturb(ctx context.Context, arg *UpdateSettingDisturbParams) error {
	_, err := q.db.Exec(ctx, updateSettingDisturb, arg.AccountID, arg.RelationID, arg.IsNotDisturb)
	return err
}

const updateSettingLeader = `-- name: UpdateSettingLeader :exec
update setting
set is_leader = $3
where account_id = $1
  and relation_id = $2
`

type UpdateSettingLeaderParams struct {
	AccountID  int64 `json:"account_id"`
	RelationID int64 `json:"relation_id"`
	IsLeader   bool  `json:"is_leader"`
}

func (q *Queries) UpdateSettingLeader(ctx context.Context, arg *UpdateSettingLeaderParams) error {
	_, err := q.db.Exec(ctx, updateSettingLeader, arg.AccountID, arg.RelationID, arg.IsLeader)
	return err
}

const updateSettingNickName = `-- name: UpdateSettingNickName :exec
update setting
set nick_name = $3
where account_id = $1
  and relation_id = $2
`

type UpdateSettingNickNameParams struct {
	AccountID  int64  `json:"account_id"`
	RelationID int64  `json:"relation_id"`
	NickName   string `json:"nick_name"`
}

func (q *Queries) UpdateSettingNickName(ctx context.Context, arg *UpdateSettingNickNameParams) error {
	_, err := q.db.Exec(ctx, updateSettingNickName, arg.AccountID, arg.RelationID, arg.NickName)
	return err
}

const updateSettingPin = `-- name: UpdateSettingPin :exec
update setting
set is_pin = $3
where account_id = $1
  and relation_id = $2
`

type UpdateSettingPinParams struct {
	AccountID  int64 `json:"account_id"`
	RelationID int64 `json:"relation_id"`
	IsPin      bool  `json:"is_pin"`
}

func (q *Queries) UpdateSettingPin(ctx context.Context, arg *UpdateSettingPinParams) error {
	_, err := q.db.Exec(ctx, updateSettingPin, arg.AccountID, arg.RelationID, arg.IsPin)
	return err
}
