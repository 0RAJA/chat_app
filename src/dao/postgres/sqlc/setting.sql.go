// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: setting.sql

package db

import (
	"context"
)

const createSetting = `-- name: CreateSetting :exec
insert into setting (account_id, relation_id, nick_name, is_leader)
values ($1, $2, $3, $4)
`

type CreateSettingParams struct {
	AccountID  int64  `json:"account_id"`
	RelationID int64  `json:"relation_id"`
	NickName   string `json:"nick_name"`
	IsLeader   bool   `json:"is_leader"`
}

func (q *Queries) CreateSetting(ctx context.Context, arg *CreateSettingParams) error {
	_, err := q.db.Exec(ctx, createSetting,
		arg.AccountID,
		arg.RelationID,
		arg.NickName,
		arg.IsLeader,
	)
	return err
}

const deleteSetting = `-- name: DeleteSetting :exec
delete
from setting
where account_id = $1
  and relation_id = $2
`

type DeleteSettingParams struct {
	AccountID  int64 `json:"account_id"`
	RelationID int64 `json:"relation_id"`
}

func (q *Queries) DeleteSetting(ctx context.Context, arg *DeleteSettingParams) error {
	_, err := q.db.Exec(ctx, deleteSetting, arg.AccountID, arg.RelationID)
	return err
}

const getSettingByID = `-- name: GetSettingByID :one
select account_id, relation_id, nick_name, is_not_disturb, is_pin, pin_time, is_show, last_show, is_leader
from setting
where account_id = $1
  and relation_id = $2
`

type GetSettingByIDParams struct {
	AccountID  int64 `json:"account_id"`
	RelationID int64 `json:"relation_id"`
}

func (q *Queries) GetSettingByID(ctx context.Context, arg *GetSettingByIDParams) (*Setting, error) {
	row := q.db.QueryRow(ctx, getSettingByID, arg.AccountID, arg.RelationID)
	var i Setting
	err := row.Scan(
		&i.AccountID,
		&i.RelationID,
		&i.NickName,
		&i.IsNotDisturb,
		&i.IsPin,
		&i.PinTime,
		&i.IsShow,
		&i.LastShow,
		&i.IsLeader,
	)
	return &i, err
}

const updateSettingDisturb = `-- name: UpdateSettingDisturb :exec
update setting
set is_not_disturb = $3
where account_id = $1
  and relation_id = $2
`

type UpdateSettingDisturbParams struct {
	AccountID    int64 `json:"account_id"`
	RelationID   int64 `json:"relation_id"`
	IsNotDisturb bool  `json:"is_not_disturb"`
}

func (q *Queries) UpdateSettingDisturb(ctx context.Context, arg *UpdateSettingDisturbParams) error {
	_, err := q.db.Exec(ctx, updateSettingDisturb, arg.AccountID, arg.RelationID, arg.IsNotDisturb)
	return err
}

const updateSettingLeader = `-- name: UpdateSettingLeader :exec
update setting
set is_leader = $3
where account_id = $1
  and relation_id = $2
`

type UpdateSettingLeaderParams struct {
	AccountID  int64 `json:"account_id"`
	RelationID int64 `json:"relation_id"`
	IsLeader   bool  `json:"is_leader"`
}

func (q *Queries) UpdateSettingLeader(ctx context.Context, arg *UpdateSettingLeaderParams) error {
	_, err := q.db.Exec(ctx, updateSettingLeader, arg.AccountID, arg.RelationID, arg.IsLeader)
	return err
}

const updateSettingNickName = `-- name: UpdateSettingNickName :exec
update setting
set nick_name = $3
where account_id = $1
  and relation_id = $2
`

type UpdateSettingNickNameParams struct {
	AccountID  int64  `json:"account_id"`
	RelationID int64  `json:"relation_id"`
	NickName   string `json:"nick_name"`
}

func (q *Queries) UpdateSettingNickName(ctx context.Context, arg *UpdateSettingNickNameParams) error {
	_, err := q.db.Exec(ctx, updateSettingNickName, arg.AccountID, arg.RelationID, arg.NickName)
	return err
}

const updateSettingPin = `-- name: UpdateSettingPin :exec
update setting
set is_pin = $3
where account_id = $1
  and relation_id = $2
`

type UpdateSettingPinParams struct {
	AccountID  int64 `json:"account_id"`
	RelationID int64 `json:"relation_id"`
	IsPin      bool  `json:"is_pin"`
}

func (q *Queries) UpdateSettingPin(ctx context.Context, arg *UpdateSettingPinParams) error {
	_, err := q.db.Exec(ctx, updateSettingPin, arg.AccountID, arg.RelationID, arg.IsPin)
	return err
}
