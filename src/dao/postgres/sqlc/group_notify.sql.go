// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: group_notify.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgtype"
)

const createGroupNotify = `-- name: CreateGroupNotify :one
insert into group_notify
(relation_id, msg_content, msg_expand, account_id, create_at, read_ids)
values ($1, $2, $3, $4, $5, $6)
returning id, relation_id, msg_content, msg_expand, account_id, create_at, read_ids
`

type CreateGroupNotifyParams struct {
	RelationID sql.NullInt64 `json:"relation_id"`
	MsgContent string        `json:"msg_content"`
	MsgExpand  pgtype.JSON   `json:"msg_expand"`
	AccountID  sql.NullInt64 `json:"account_id"`
	CreateAt   time.Time     `json:"create_at"`
	ReadIds    []int64       `json:"read_ids"`
}

type CreateGroupNotifyRow struct {
	ID         int64         `json:"id"`
	RelationID sql.NullInt64 `json:"relation_id"`
	MsgContent string        `json:"msg_content"`
	MsgExpand  pgtype.JSON   `json:"msg_expand"`
	AccountID  sql.NullInt64 `json:"account_id"`
	CreateAt   time.Time     `json:"create_at"`
	ReadIds    []int64       `json:"read_ids"`
}

func (q *Queries) CreateGroupNotify(ctx context.Context, arg *CreateGroupNotifyParams) (*CreateGroupNotifyRow, error) {
	row := q.db.QueryRow(ctx, createGroupNotify,
		arg.RelationID,
		arg.MsgContent,
		arg.MsgExpand,
		arg.AccountID,
		arg.CreateAt,
		arg.ReadIds,
	)
	var i CreateGroupNotifyRow
	err := row.Scan(
		&i.ID,
		&i.RelationID,
		&i.MsgContent,
		&i.MsgExpand,
		&i.AccountID,
		&i.CreateAt,
		&i.ReadIds,
	)
	return &i, err
}

const deleteGroupNotify = `-- name: DeleteGroupNotify :exec
delete
from group_notify
where id = $1
`

func (q *Queries) DeleteGroupNotify(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGroupNotify, id)
	return err
}

const getGroupNotifyByID = `-- name: GetGroupNotifyByID :many
select id, relation_id, msg_content, msg_expand, account_id, create_at, read_ids
from group_notify
where relation_id = $1
`

type GetGroupNotifyByIDRow struct {
	ID         int64         `json:"id"`
	RelationID sql.NullInt64 `json:"relation_id"`
	MsgContent string        `json:"msg_content"`
	MsgExpand  pgtype.JSON   `json:"msg_expand"`
	AccountID  sql.NullInt64 `json:"account_id"`
	CreateAt   time.Time     `json:"create_at"`
	ReadIds    []int64       `json:"read_ids"`
}

func (q *Queries) GetGroupNotifyByID(ctx context.Context, relationID sql.NullInt64) ([]*GetGroupNotifyByIDRow, error) {
	rows, err := q.db.Query(ctx, getGroupNotifyByID, relationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetGroupNotifyByIDRow{}
	for rows.Next() {
		var i GetGroupNotifyByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.RelationID,
			&i.MsgContent,
			&i.MsgExpand,
			&i.AccountID,
			&i.CreateAt,
			&i.ReadIds,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupNotify = `-- name: UpdateGroupNotify :one
update group_notify
set relation_id= $1,
    msg_content= $2,
    msg_expand = $3,
    account_id = $4,
    create_at  = $5,
    read_ids   = $6
where id=$7
    returning id, relation_id, msg_content, msg_expand, account_id, create_at, read_ids
`

type UpdateGroupNotifyParams struct {
	RelationID sql.NullInt64 `json:"relation_id"`
	MsgContent string        `json:"msg_content"`
	MsgExpand  pgtype.JSON   `json:"msg_expand"`
	AccountID  sql.NullInt64 `json:"account_id"`
	CreateAt   time.Time     `json:"create_at"`
	ReadIds    []int64       `json:"read_ids"`
	ID         int64         `json:"id"`
}

type UpdateGroupNotifyRow struct {
	ID         int64         `json:"id"`
	RelationID sql.NullInt64 `json:"relation_id"`
	MsgContent string        `json:"msg_content"`
	MsgExpand  pgtype.JSON   `json:"msg_expand"`
	AccountID  sql.NullInt64 `json:"account_id"`
	CreateAt   time.Time     `json:"create_at"`
	ReadIds    []int64       `json:"read_ids"`
}

func (q *Queries) UpdateGroupNotify(ctx context.Context, arg *UpdateGroupNotifyParams) (*UpdateGroupNotifyRow, error) {
	row := q.db.QueryRow(ctx, updateGroupNotify,
		arg.RelationID,
		arg.MsgContent,
		arg.MsgExpand,
		arg.AccountID,
		arg.CreateAt,
		arg.ReadIds,
		arg.ID,
	)
	var i UpdateGroupNotifyRow
	err := row.Scan(
		&i.ID,
		&i.RelationID,
		&i.MsgContent,
		&i.MsgExpand,
		&i.AccountID,
		&i.CreateAt,
		&i.ReadIds,
	)
	return &i, err
}
