// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into "user" ("email", "password")
values (?, ?)
returning id, email, password, create_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreateAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete
from "user"
where "id" = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const existEmail = `-- name: ExistEmail :one
select exists(select 1 from "user" where email = ?)
`

func (q *Queries) ExistEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, existEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAllEmails = `-- name: GetAllEmails :many
select email
from "user"
`

func (q *Queries) GetAllEmails(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, password, create_at
from "user"
where email = ?
limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreateAt,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, email, password, create_at
from "user"
where id = ?
limit 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreateAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :exec
update "user"
set "email"    = ?,
    "password" = ?
where "id" = ?
`

type UpdateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Email, arg.Password, arg.ID)
	return err
}
