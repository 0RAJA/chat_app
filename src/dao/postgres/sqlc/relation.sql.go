// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: relation.sql

package db

import (
	"context"
	"database/sql"
)

const createFriendRelation = `-- name: CreateFriendRelation :exec
insert into relation (relation_type, friend_type)
values ('friend', ROW ($1::bigint, $2::bigint))
`

type CreateFriendRelationParams struct {
	Account1ID int64 `json:"account1_id"`
	Account2ID int64 `json:"account2_id"`
}

func (q *Queries) CreateFriendRelation(ctx context.Context, arg *CreateFriendRelationParams) error {
	_, err := q.db.Exec(ctx, createFriendRelation, arg.Account1ID, arg.Account2ID)
	return err
}

const createGroupRelation = `-- name: CreateGroupRelation :exec
insert into relation (relation_type, group_type)
values ('group', ROW ($1::varchar(50), $2::varchar(255), $3::varchar(255)))
`

type CreateGroupRelationParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Avatar      string `json:"avatar"`
}

func (q *Queries) CreateGroupRelation(ctx context.Context, arg *CreateGroupRelationParams) error {
	_, err := q.db.Exec(ctx, createGroupRelation, arg.Name, arg.Description, arg.Avatar)
	return err
}

const deleteRelation = `-- name: DeleteRelation :exec
delete
from relation
where id = $1
`

func (q *Queries) DeleteRelation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRelation, id)
	return err
}

const getGroupRelationByID = `-- name: GetGroupRelationByID :one
select id,
       relation_type,
       (group_type).name        as name,
       (group_type).description as description,
       (group_type).avatar      as avatar,
       create_at
from relation
where relation_type = 'group'
  and id = $1
`

type GetGroupRelationByIDRow struct {
	ID           int64        `json:"id"`
	RelationType Relationtype `json:"relation_type"`
	Name         interface{}  `json:"name"`
	Description  interface{}  `json:"description"`
	Avatar       interface{}  `json:"avatar"`
	CreateAt     sql.NullTime `json:"create_at"`
}

func (q *Queries) GetGroupRelationByID(ctx context.Context, id int64) (*GetGroupRelationByIDRow, error) {
	row := q.db.QueryRow(ctx, getGroupRelationByID, id)
	var i GetGroupRelationByIDRow
	err := row.Scan(
		&i.ID,
		&i.RelationType,
		&i.Name,
		&i.Description,
		&i.Avatar,
		&i.CreateAt,
	)
	return &i, err
}

const updateGroupRelation = `-- name: UpdateGroupRelation :exec
update relation
set (group_type) = (ROW ($1::varchar(50), $2::varchar(255), $3::varchar(255)))
where relation_type = 'group'
  and id = $4
`

type UpdateGroupRelationParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Avatar      string `json:"avatar"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateGroupRelation(ctx context.Context, arg *UpdateGroupRelationParams) error {
	_, err := q.db.Exec(ctx, updateGroupRelation,
		arg.Name,
		arg.Description,
		arg.Avatar,
		arg.ID,
	)
	return err
}
