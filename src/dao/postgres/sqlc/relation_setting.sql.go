// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: relation_setting.sql

package db

import (
	"context"
	"time"
)

const createRelationSetting = `-- name: CreateRelationSetting :one
insert into relation_setting
(account_id, relation_id, nick_name, is_not_disturb, is_pin, pin_time, is_show, last_show, is_leader)
values (?, ?, ?, ?, ?, ?, ?, ?, ?)
returning account_id, relation_id, nick_name, is_not_disturb, is_pin, pin_time, is_show, last_show, is_leader
`

type CreateRelationSettingParams struct {
	AccountID    int64     `json:"account_id"`
	RelationID   int64     `json:"relation_id"`
	NickName     string    `json:"nick_name"`
	IsNotDisturb bool      `json:"is_not_disturb"`
	IsPin        bool      `json:"is_pin"`
	PinTime      time.Time `json:"pin_time"`
	IsShow       bool      `json:"is_show"`
	LastShow     time.Time `json:"last_show"`
	IsLeader     bool      `json:"is_leader"`
}

func (q *Queries) CreateRelationSetting(ctx context.Context, arg *CreateRelationSettingParams) (*RelationSetting, error) {
	row := q.db.QueryRow(ctx, createRelationSetting,
		arg.AccountID,
		arg.RelationID,
		arg.NickName,
		arg.IsNotDisturb,
		arg.IsPin,
		arg.PinTime,
		arg.IsShow,
		arg.LastShow,
		arg.IsLeader,
	)
	var i RelationSetting
	err := row.Scan(
		&i.AccountID,
		&i.RelationID,
		&i.NickName,
		&i.IsNotDisturb,
		&i.IsPin,
		&i.PinTime,
		&i.IsShow,
		&i.LastShow,
		&i.IsLeader,
	)
	return &i, err
}

const deleteRelationSetting = `-- name: DeleteRelationSetting :exec
delete
from relation_setting
where account_id=?
  and relation_id=?
`

type DeleteRelationSettingParams struct {
	AccountID  int64 `json:"account_id"`
	RelationID int64 `json:"relation_id"`
}

func (q *Queries) DeleteRelationSetting(ctx context.Context, arg *DeleteRelationSettingParams) error {
	_, err := q.db.Exec(ctx, deleteRelationSetting, arg.AccountID, arg.RelationID)
	return err
}

const getRelationSetting = `-- name: GetRelationSetting :one

select account_id, relation_id, nick_name, is_not_disturb, is_pin, pin_time, is_show, last_show, is_leader
from relation_setting
where account_id=?
  and relation_id=?
limit 1
`

type GetRelationSettingParams struct {
	AccountID  int64 `json:"account_id"`
	RelationID int64 `json:"relation_id"`
}

func (q *Queries) GetRelationSetting(ctx context.Context, arg *GetRelationSettingParams) (*RelationSetting, error) {
	row := q.db.QueryRow(ctx, getRelationSetting, arg.AccountID, arg.RelationID)
	var i RelationSetting
	err := row.Scan(
		&i.AccountID,
		&i.RelationID,
		&i.NickName,
		&i.IsNotDisturb,
		&i.IsPin,
		&i.PinTime,
		&i.IsShow,
		&i.LastShow,
		&i.IsLeader,
	)
	return &i, err
}

const updateRelationSetting = `-- name: UpdateRelationSetting :one
update relation_setting
set nick_name= ?,
    is_not_disturb=?,
    is_pin=?,
    pin_time=?,
    is_show=?,
    last_show=?
where account_id=?
  and relation_id=?
returning account_id, relation_id, nick_name, is_not_disturb, is_pin, pin_time, is_show, last_show, is_leader
`

type UpdateRelationSettingParams struct {
	NickName     string    `json:"nick_name"`
	IsNotDisturb bool      `json:"is_not_disturb"`
	IsPin        bool      `json:"is_pin"`
	PinTime      time.Time `json:"pin_time"`
	IsShow       bool      `json:"is_show"`
	LastShow     time.Time `json:"last_show"`
	AccountID    int64     `json:"account_id"`
	RelationID   int64     `json:"relation_id"`
}

func (q *Queries) UpdateRelationSetting(ctx context.Context, arg *UpdateRelationSettingParams) (*RelationSetting, error) {
	row := q.db.QueryRow(ctx, updateRelationSetting,
		arg.NickName,
		arg.IsNotDisturb,
		arg.IsPin,
		arg.PinTime,
		arg.IsShow,
		arg.LastShow,
		arg.AccountID,
		arg.RelationID,
	)
	var i RelationSetting
	err := row.Scan(
		&i.AccountID,
		&i.RelationID,
		&i.NickName,
		&i.IsNotDisturb,
		&i.IsPin,
		&i.PinTime,
		&i.IsShow,
		&i.LastShow,
		&i.IsLeader,
	)
	return &i, err
}
