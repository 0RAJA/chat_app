// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
insert into account (id, user_id, name, avatar)
values ($1, $2, $3, $4)
returning id, user_id, name, avatar, gender, signature, create_at
`

type CreateAccountParams struct {
	ID     int64  `json:"id"`
	UserID int64  `json:"user_id"`
	Name   string `json:"name"`
	Avatar string `json:"avatar"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg *CreateAccountParams) (*Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Avatar,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Avatar,
		&i.Gender,
		&i.Signature,
		&i.CreateAt,
	)
	return &i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
delete
from account
where id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const existsAccountByID = `-- name: ExistsAccountByID :one
select exists(
               select 1
               from account
               where id = $1
           )
`

func (q *Queries) ExistsAccountByID(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, existsAccountByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAccountByID = `-- name: GetAccountByID :one
select id, user_id, name, avatar, gender, signature, create_at
from account
where id = $1
limit 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (*Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Avatar,
		&i.Gender,
		&i.Signature,
		&i.CreateAt,
	)
	return &i, err
}

const getAccountsByUserID = `-- name: GetAccountsByUserID :many
select id, name, avatar
from account
where user_id = $1
`

type GetAccountsByUserIDRow struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	Avatar string `json:"avatar"`
}

func (q *Queries) GetAccountsByUserID(ctx context.Context, userID int64) ([]*GetAccountsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getAccountsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAccountsByUserIDRow{}
	for rows.Next() {
		var i GetAccountsByUserIDRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Avatar); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
update account
set name      = $1,
    avatar    = $2,
    gender    = $3,
    signature = $4
where id = $5
returning id, user_id, name, avatar, gender, signature, create_at
`

type UpdateAccountParams struct {
	Name      string `json:"name"`
	Avatar    string `json:"avatar"`
	Gender    Gender `json:"gender"`
	Signature string `json:"signature"`
	ID        int64  `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg *UpdateAccountParams) (*Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.Name,
		arg.Avatar,
		arg.Gender,
		arg.Signature,
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Avatar,
		&i.Gender,
		&i.Signature,
		&i.CreateAt,
	)
	return &i, err
}
